{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStayToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","DialogItem","path","id","className","cl","dialog","active","src","img","ava","alt","name","hr","Message","wrapper_mess","messages","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","textarea","Field","component","TextArea","input","validate","required","placeholder","btn","Dialogs","messagesPage","dialogsArr","dialogsData","map","elem","key","messagesArr","messagesData","mess","wrapperOut","dialogs","dialogsItem","AddMessageForm","values","sendMessageCreator","newMessageBody","compose","actions"],"mappings":"+JAKIA,EAA4B,SAACC,GAAD,MAA0B,CACtDC,OAAQD,EAAME,KAAKD,SA8BRE,IArBR,SAA+BC,GAclC,OADiCC,YAA4DN,EAA5DM,EAXqC,SAACC,GAAW,IACxEL,EAAyBK,EAAzBL,OAAWM,EAD4D,YAC9CD,EAD8C,YAG7E,OAAKL,EAEG,6BACJ,kBAACG,EAAcG,IAHC,kBAAC,IAAD,CAAUC,GAAI,gB,oBCnB1CC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,0BAA0B,WAAa,4BAA4B,SAAW,0BAA0B,IAAM,uB,oBCAzND,EAAOC,QAAU,CAAC,OAAS,4BAA4B,OAAS,4BAA4B,IAAM,yBAAyB,GAAK,0B,oBCAhID,EAAOC,QAAU,CAAC,SAAW,0BAA0B,aAAe,gC,iICuBvDC,EAbyB,SAACL,GACrC,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OACI,6BACI,yBAAKC,UAAWC,IAAGC,OAAS,IAAMD,IAAGE,QACjC,yBAAKC,IAAKZ,EAAMa,IAAKL,UAAWC,IAAGK,IAAKC,IAAI,WAC5C,kBAAC,IAAD,CAASb,GAAII,GAAQN,EAAMgB,OAE/B,wBAAIR,UAAWC,IAAGQ,O,kBCHfC,EATsB,SAAClB,GAClC,OACI,yBAAKQ,UAAWC,IAAGU,cACf,yBAAKX,UAAWC,IAAGW,UAAWpB,EAAMqB,W,kCCH1CC,EAAcC,YAAiB,IActBC,cAAiC,CAAEC,KAAM,wBAAzCD,EAXoF,SAACxB,GAChG,OAAQ,0BAAM0B,SAAU1B,EAAM2B,aAAcnB,UAAWC,IAAGmB,UACtD,kBAACC,EAAA,EAAD,CACIC,UAAWC,IAAUvB,UAAWC,IAAGuB,MACnCC,SAAU,CAACC,IAAUZ,GACrBa,YAAY,kBACZnB,KAAK,mBACT,4BAAQR,UAAWC,IAAG2B,KAAtB,YCuBOC,EAvBsB,SAACrC,GAClC,IAAIN,EAAQM,EAAMsC,aACdC,EAAa7C,EAAM8C,YAAYC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAYC,IAAKD,EAAKnC,GAAIS,KAAM0B,EAAK1B,KAAMT,GAAImC,EAAKnC,GAAIM,IAAK6B,EAAK5B,SAC7G8B,EAAclD,EAAMmD,aAAaJ,KAAI,SAAAK,GAAI,OAAI,kBAAC,EAAD,CAASH,IAAKG,EAAKvC,GAAIc,QAASyB,EAAK1B,cAKtF,OAAQ,yBAAKZ,UAAWC,IAAGsC,YACvB,yBAAKvC,UAAWC,IAAGuC,SACf,yBAAKxC,UAAWC,IAAGwC,aACdV,GAEL,yBAAK/B,UAAWC,IAAGW,UACdwB,IAGT,kBAACM,EAAD,CAAgBxB,SAZA,SAACyB,GACjBnD,EAAMoD,mBAAmBD,EAAOE,qB,gBCEzBC,sBACXvD,aAlBkB,SAACL,GACnB,MAAO,CAEH4C,aAAc5C,EAAM4C,aACpB3C,OAAQD,EAAME,KAAKD,UAchB,eAAuB4D,MAC9B1D,IAFWyD,CAGbjB","file":"static/js/4.f0ca2157.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../Redux/redux-store';\r\n\r\nlet mapStayToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let { isAuth, ...restProps } = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n        return (<div>\r\n            <Component {...restProps as WCP} />\r\n        </div>\r\n        )\r\n\r\n    }\r\n    let ConnectedRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStayToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default withAuthRedirect;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2nx7-\",\"dialogsItem\":\"Dialogs_dialogsItem__24xgV\",\"messages\":\"Dialogs_messages__38Fyc\",\"wrapperOut\":\"Dialogs_wrapperOut__18APb\",\"textarea\":\"Dialogs_textarea__24IYP\",\"btn\":\"Dialogs_btn__2mEeW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"DialogsItem_active__3ItJ8\",\"dialog\":\"DialogsItem_dialog__li4UT\",\"ava\":\"DialogsItem_ava__1EzE3\",\"hr\":\"DialogsItem_hr__1f5U3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__2soV7\",\"wrapper_mess\":\"Message_wrapper_mess__3pyKg\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport cl from './DialogsItem.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div>\r\n            <div className={cl.dialog + ' ' + cl.active}>\r\n                <img src={props.img} className={cl.ava} alt='avatar'></img>\r\n                <NavLink to={path} >{props.name}</NavLink>\r\n            </div>\r\n            <hr className={cl.hr}></hr>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport cl from './Message.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={cl.wrapper_mess}>\r\n            <div className={cl.messages}>{props.message}</div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from '../../../Utils/validators';\r\nimport { DialogsFormValuesType } from '../Dialogs';\r\nimport { TextArea } from '../../../Forms/Input';\r\nimport cl from '../Dialogs.module.css';\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\ntype PropsType = {}\r\n\r\nconst AddMessagesForm: React.FC<InjectedFormProps<DialogsFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (<form onSubmit={props.handleSubmit} className={cl.textarea}>\r\n        <Field\r\n            component={TextArea} className={cl.input}\r\n            validate={[required, maxLength50]}\r\n            placeholder='send Message...'\r\n            name='newMessageBody'></Field>\r\n        <button className={cl.btn}>Send</button>\r\n    </form>)\r\n}\r\n\r\nexport default reduxForm<DialogsFormValuesType>({ form: 'dialogAddMessageForm' })(AddMessagesForm);","import React from 'react';\r\nimport cl from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport { InitialStateType } from '../../Redux/dialogs_reducer'\r\n\r\ntype PropsType = {\r\n    messagesPage: InitialStateType\r\n    sendMessageCreator: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.messagesPage;\r\n    let dialogsArr = state.dialogsData.map(elem => <DialogItem key={elem.id} name={elem.name} id={elem.id} img={elem.ava} />);\r\n    let messagesArr = state.messagesData.map(mess => <Message key={mess.id} message={mess.messages} />);\r\n\r\n    let addNewMessage = (values: DialogsFormValuesType) => {\r\n        props.sendMessageCreator(values.newMessageBody);\r\n    }\r\n    return (<div className={cl.wrapperOut}>\r\n        <div className={cl.dialogs}>\r\n            <div className={cl.dialogsItem}>\r\n                {dialogsArr}\r\n            </div>\r\n            <div className={cl.messages}>\r\n                {messagesArr}\r\n            </div>\r\n        </div>\r\n        <AddMessageForm onSubmit={addNewMessage} />\r\n    </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { actions } from '../../Redux/dialogs_reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../Redux/redux-store';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        // newMessageText: state.messagesPage.newMessageText,\r\n        messagesPage: state.messagesPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n};\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         sendMessageCreator: (newMessageText) => {\r\n//             dispatch(actions.sendMessageCreator(newMessageText));\r\n//         },\r\n\r\n//     }\r\n// };\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { ...actions }),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}