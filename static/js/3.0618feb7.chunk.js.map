{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profline.module.css","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profline.tsx","components/Profile/ProfileCointainer.tsx"],"names":["mapStayToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHook","useState","editMode","setEditMore","status","statuss","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormRedux","reduxForm","form","handleSubmit","profile","error","onSubmit","className","cl","formErrorSummary","Field","placeholder","name","component","Input","type","TextArea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","bigImg","src","photos","large","userPfoto","alt","target","files","length","initialValues","formData","then","Post","item","message","like","maxLength10","maxLengthCreator","sendPost","validate","required","area","btn","MyPosts","postArr","posts","post","id","myPosts","values","addPostActionCreator","newPostBody","MyPostsMemorized","React","memo","MyPostsContainer","profilePage","postData","actions","Profile","wrapper","ProfileContainer","userId","this","match","params","authorizerdUserId","getUserProfile","getUserStatus","console","refreshProfile","prevProps","prevState","compose","withRouter"],"mappings":"+JAKIA,EAA4B,SAACC,GAAD,MAA0B,CACtDC,OAAQD,EAAME,KAAKD,SA8BRE,IArBR,SAA+BC,GAclC,OADiCC,YAA4DN,EAA5DM,EAXqC,SAACC,GAAW,IACxEL,EAAyBK,EAAzBL,OAAWM,EAD4D,YAC9CD,EAD8C,YAG7E,OAAKL,EAEG,6BACJ,kBAACG,EAAcG,IAHC,kBAAC,IAAD,CAAUC,GAAI,gB,oBCnB1CC,EAAOC,QAAU,CAAC,OAAS,4BAA4B,YAAc,iCAAiC,QAAU,+B,oBCAhHD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,SAAW,0BAA0B,IAAM,uB,oBCAnID,EAAOC,QAAU,CAAC,KAAO,qB,oBCAzBD,EAAOC,QAAU,CAAC,QAAU,4B,oJC8CbC,EAxCoC,SAACL,GAAW,IAAD,EAE5BM,oBAAS,GAFmB,mBAErDC,EAFqD,KAE3CC,EAF2C,OAG/BF,mBAASN,EAAMS,QAHgB,mBAGrDC,EAHqD,KAG5CC,EAH4C,KAK1DC,qBAAU,WACND,EAAUX,EAAMS,UACjB,CAACT,EAAMS,SAeV,OACI,8BACMF,GACE,6BACI,0BAAMM,cAlBI,WACtBL,GAAY,KAiBwC,sCAAxC,IAAwDR,EAAMS,QAAU,WAG/EF,GACG,2BAAOO,SAbI,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYeC,WAAW,EAAMC,OAlBlC,WACxBX,GAAY,GACZR,EAAMoB,aAAaV,IAiBPO,MAAOP,M,0BCWZW,EADcC,YAAkC,CAAEC,KAAM,gBAA1CD,EAtC4D,SAAC,GAAsC,IAApCE,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC/G,OAAO,0BAAMC,SAAUH,GACnB,6BAAK,yCACL,6BACKE,GAAS,yBAAKE,UAAWC,IAAGC,kBACxBJ,GAGL,6BACI,yCACA,kBAACK,EAAA,EAAD,CAAOC,YAAa,YAAaC,KAAM,WAAYC,UAAWC,OAElE,6BACI,iDACA,kBAACJ,EAAA,EAAD,CAAOK,KAAM,WAAYF,UAAWC,IAAOF,KAAM,oBAErD,6BACI,sDACA,kBAACF,EAAA,EAAD,CAAOC,YAAa,yBAChBC,KAAM,4BAA6BC,UAAWG,OAEtD,6BACI,wCACA,kBAACN,EAAA,EAAD,CACIC,YAAa,WAAYC,KAAM,UAAWC,UAAWG,OAE7D,6BACI,wCADJ,IACsBC,OAAOC,KAAKd,EAAQe,UAAUC,KAAI,SAAAC,GAChD,OAAO,yBAAKd,UAAWC,IAAGc,QAASD,IAAKA,GACpC,2BAAIA,EAAJ,KAAU,kBAACX,EAAA,EAAD,CAAOC,YAAaU,EAAKT,KAAM,YAAcS,EACnDR,UAAWC,iBCkBjCS,EAA8C,SAAC,GAAwC,IAAtCnB,EAAqC,EAArCA,QAASoB,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aACrE,OACI,6BACKD,GAAW,6BAAK,4BAAQE,QAASD,GAAjB,SACjB,6BACI,yCADJ,IACuBrB,EAAQuB,UAE/B,6BACI,iDADJ,IAC+BvB,EAAQwB,eAAiB,MAAQ,MAE/DxB,EAAQwB,gBACL,6BACI,sDADJ,IACoCxB,EAAQyB,2BAGhD,6BACI,wCADJ,IACsBzB,EAAQ0B,SAE9B,6BACI,wCADJ,IACsBb,OAAOC,KAAKd,EAAQe,UAAUC,KAAI,SAAAC,GAChD,OAAO,kBAAC,EAAD,CAASA,IAAKA,EAAKU,aAAcV,EAAKW,aAAc5B,EAAQe,SAASE,WAU1FY,EAAuC,SAAC,GAAoC,IAAlCF,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC1D,OACI,yBAAKzB,UAAWC,IAAGc,SAAS,2BAAIS,GAAhC,KAAoDC,IAI7CE,EA5E0B,SAAC,GAAwE,IAAtE9B,EAAqE,EAArEA,QAAS+B,EAA4D,EAA5DA,UAAWX,EAAiD,EAAjDA,QAASpC,EAAwC,EAAxCA,OAAQW,EAAgC,EAAhCA,aAAcqC,EAAkB,EAAlBA,YAAkB,EAE/EnD,oBAAS,GAFsE,mBAExGC,EAFwG,KAE9FC,EAF8F,KAG7G,IAAKiB,EACD,OAAO,kBAACiC,EAAA,EAAD,MAiBX,OACI,6BACI,yBAAK9B,UAAWC,IAAG8B,QACf,yBAAKC,IAAKnC,EAAQoC,OAAOC,OAASC,IAAWC,IAAI,KAChDnB,GAAW,2BAAOT,KAAM,OAAQtB,SAnBlB,SAACC,GACpBA,EAAEkD,OAAOC,OAASnD,EAAEkD,OAAOC,MAAMC,QACjCX,EAAUzC,EAAEkD,OAAOC,MAAM,QAmBvB3D,EAAW,kBAAC,EAAD,CAAsB6D,cAAe3C,EAASA,QAASA,EAASE,SAfpE,SAAC0C,GACdZ,EAAYY,GAAUC,MAClB,WACI9D,GAAY,SAaV,kBAAC,EAAD,CAAasC,aAAc,WAAQtC,GAAY,IAASiB,QAASA,EAASoB,QAASA,IAEzF,kBAAC,EAAD,CAAuBpC,OAAQA,EAAQW,aAAcA,M,oDC5BlDmD,EAZmB,SAACvE,GAC/B,OACI,yBAAK4B,UAAWC,IAAG2C,MACf,yBAAKZ,IAAI,wGAAwGI,IAAI,QACpHhE,EAAMyE,QACP,6BACI,sCADJ,IACuBzE,EAAM0E,Q,QCHnCC,EAAcC,YAAiB,IAatBtD,cAAiC,CAAEC,KAAM,yBAAzCD,EAXgF,SAACtB,GAC5F,OAAQ,0BAAM2B,SAAU3B,EAAMwB,aAAcI,UAAWC,IAAGgD,UACtD,kBAAC9C,EAAA,EAAD,CACI+C,SAAU,CAACC,IAAUJ,GACrB1C,KAAK,cACLC,UAAWG,IACXL,YAAY,eACZJ,UAAWC,IAAGmD,OAClB,4BAAQpD,UAAWC,IAAGoD,KAAtB,WCLFC,EAAsD,SAAClF,GAEzD,IAAImF,EAAUnF,EAAMoF,MAAM3C,KAAI,SAAA4C,GAAI,OAAI,kBAAC,EAAD,CAAM3C,IAAK2C,EAAKC,GAAIb,QAASY,EAAKZ,QAASC,KAAMW,EAAKC,QAO5F,OACI,yBAAK1D,UAAWC,IAAG0D,SACf,uCACA,kBAAC,EAAD,CAAa5D,SARH,SAAC6D,GACfxF,EAAMyF,qBAAqBD,EAAOE,gBAQ9B,yBAAK9D,UAAWC,IAAGuD,OACdD,KAQFQ,EAFUC,IAAMC,KAAKX,GClBrBY,EAFU/F,aATH,SAACL,GACnB,MAAO,CACH0F,MAAO1F,EAAMqG,YAAYC,YAOD,eAA0EC,KAAjFlG,CAA4FmF,G,kBCetGgB,EAfsB,SAAClG,GAElC,OAAQ,yBAAK4B,UAAWC,IAAGsE,SACvB,kBAAC,EAAD,CAAa1E,QAASzB,EAAMyB,QACxBoB,QAAS7C,EAAM6C,QACfpC,OAAQT,EAAMS,OACdW,aAAcpB,EAAMoB,aACpBoC,UAAWxD,EAAMwD,UACjBC,YAAazD,EAAMyD,cACvB,kBAAC,EAAD,Q,yBCAF2C,E,+KAGE,IAAIC,GAAyBC,KAAKtG,MAAMuG,MAAMC,OAAOH,OAChDA,IACDA,EAASC,KAAKtG,MAAMyG,mBAEnBJ,GAIDC,KAAKtG,MAAM0G,eAAeL,GAC1BC,KAAKtG,MAAM2G,cAAcN,IAJzBO,QAAQlF,MAAM,qE,0CASlB4E,KAAKO,mB,yCAGUC,EAAsBC,GACjCT,KAAKtG,MAAMuG,MAAMC,OAAOH,QAAUS,EAAUP,MAAMC,OAAOH,QACzDC,KAAKO,mB,+BAMT,OAAQ,6BACJ,kBAAC,EAAD,iBAAaP,KAAKtG,MAAlB,CACI6C,SAAUyD,KAAKtG,MAAMuG,MAAMC,OAAOH,OAClC5E,QAAS6E,KAAKtG,MAAMyB,QACpBhB,OAAQ6F,KAAKtG,MAAMS,OACnBW,aAAckF,KAAKtG,MAAMoB,aACzBoC,UAAW8C,KAAKtG,MAAMwD,UACtBC,YAAa6C,KAAKtG,MAAMyD,oB,GAnCTmC,IAAM9F,WAkDtBkH,sBACXjH,aAVkB,SAACL,GAAD,MAA0B,CAC5C+B,QAAS/B,EAAMqG,YAAYtE,QAC3BhB,OAAQf,EAAMqG,YAAYtF,OAC1Bd,OAAQD,EAAME,KAAKD,OACnB8G,kBAAmB/G,EAAME,KAAKyG,UAML,CAAEK,mBAAgBC,kBAAevF,iBAAcoC,cAAWC,kBACnFwD,IACApH,IAHWmH,CAIbZ","file":"static/js/3.0618feb7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../Redux/redux-store';\r\n\r\nlet mapStayToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let { isAuth, ...restProps } = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n        return (<div>\r\n            <Component {...restProps as WCP} />\r\n        </div>\r\n        )\r\n\r\n    }\r\n    let ConnectedRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStayToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default withAuthRedirect;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bigImg\":\"ProfileInfo_bigImg__2DvMu\",\"description\":\"ProfileInfo_description__p48MB\",\"contact\":\"ProfileInfo_contact__1yK82\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__2NAsm\",\"myPosts\":\"MyPosts_myPosts__3kQwO\",\"sendPost\":\"MyPosts_sendPost__3Bw0k\",\"btn\":\"MyPosts_btn__WRZ_D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Htp5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profline_wrapper__cHze2\"};","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHook: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMore] = useState(false);\r\n    let [statuss, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n    const activatedEditMode = () => {\r\n        setEditMore(true);\r\n    };\r\n\r\n    const deactivatedEditMode = () => {\r\n        setEditMore(false);\r\n        props.updateStatus(statuss);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activatedEditMode}><b>Status:</b> {props.status || 'j-----'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivatedEditMode}\r\n                    value={statuss}>\r\n                </input>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n};\r\n\r\nexport default ProfileStatusWithHook;","import React from 'react';\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { Input, TextArea } from '../../../Forms/Input';\r\nimport cl from './ProfileInfo.module.css';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        <div>\r\n            {error && <div className={cl.formErrorSummary}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Full name:</b>\r\n                <Field placeholder={'Full name'} name={'fullName'} component={Input} />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                <Field type={'checkbox'} component={Input} name={'lookingForAJob'} />\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                <Field placeholder={'My professional skills'}\r\n                    name={'lookingForAJobDescription'} component={TextArea} />\r\n            </div>\r\n            <div>\r\n                <b>About Me:</b>\r\n                <Field\r\n                    placeholder={'About me'} name={'aboutMe'} component={TextArea} />\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <div className={cl.contact} key={key}>\r\n                        <b>{key}: <Field placeholder={key} name={'contacts.' + key}\r\n                            component={Input} /></b>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormRedux = reduxForm<ProfileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm)\r\nexport default ProfileDataFormRedux","import React, { ChangeEvent, } from 'react';\r\nimport { useState } from 'react';\r\nimport Preloader from '../../../common/Preloader/Preloader';\r\nimport userPfoto from '../../../assets/images/user.png'\r\nimport cl from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHook from './ProfileStatusWithHook';\r\nimport ProfileDataFormRedux from './ProfileDataForm';\r\nimport { ProfileType, ContactsType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, savePhoto, isOwner, status, updateStatus, saveProfile }) => {\r\n\r\n    let [editMode, setEditMore] = useState(false);\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    const onMainPhooSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMore(false);\r\n            }\r\n        );\r\n\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={cl.bigImg}>\r\n                <img src={profile.photos.large || userPfoto} alt='' />\r\n                {isOwner && <input type={'file'} onChange={onMainPhooSelected} />}\r\n            </div>\r\n            { editMode ? <ProfileDataFormRedux initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                : <ProfileData goToEditMode={() => { setEditMore(true) }} profile={profile} isOwner={isOwner} />}\r\n\r\n            <ProfileStatusWithHook status={status} updateStatus={updateStatus} />\r\n        </div>\r\n    );\r\n};\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About Me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div className={cl.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport cl from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    like: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={cl.item}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRKD17RdQJlmy3HC_xwalAsXG5kntjZ6odskQ&usqp=CAU\" alt='ava'></img>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span> {props.like}\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport cl from '../MyPosts.module.css';\r\nimport { required, maxLengthCreator } from '../../../../Utils/validators';\r\nimport { TextArea } from '../../../../Forms/Input';\r\nimport { AddPostFormValuesType } from '../MyPosts';\r\n\r\ntype PropsType = {}\r\n\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (<form onSubmit={props.handleSubmit} className={cl.sendPost}>\r\n        <Field\r\n            validate={[required, maxLength10]}\r\n            name='newPostBody'\r\n            component={TextArea}\r\n            placeholder='send Post...'\r\n            className={cl.area}></Field>\r\n        <button className={cl.btn}>Add</button>\r\n    </form>)\r\n}\r\nexport default reduxForm<AddPostFormValuesType>({ form: 'ProfileAddNewPostForm' })(AddPostForm);","import React from 'react';\r\nimport cl from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddPostForm from './AddPostForm/AddPostForm';\r\nimport { PostDataType } from '../../../types/types';\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostDataType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPostActionCreator: (newPostBody: string) => void\r\n}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostBody: string\r\n}\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n    let postArr = props.posts.map(post => <Post key={post.id} message={post.message} like={post.id} />)\r\n\r\n    const onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPostActionCreator(values.newPostBody);\r\n\r\n    };\r\n\r\n    return (\r\n        <div className={cl.myPosts}>\r\n            <h3>My post</h3>\r\n            <AddPostForm onSubmit={onAddPost} />\r\n            <div className={cl.posts}>\r\n                {postArr}\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\n\r\nexport default MyPostsMemorized;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actions } from '../../../Redux/profile_reducer';\r\nimport { AppStateType } from '../../../Redux/redux-store';\r\nimport MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts';\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.postData,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\n\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, { ...actions })(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport { ProfileType } from '../../types/types';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport cl from './Profline.module.css';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n    return (<div className={cl.wrapper}>\r\n        <ProfileInfo profile={props.profile}\r\n            isOwner={props.isOwner}\r\n            status={props.status}\r\n            updateStatus={props.updateStatus}\r\n            savePhoto={props.savePhoto}\r\n            saveProfile={props.saveProfile} />\r\n        <MyPostsContainer />\r\n\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profline';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile } from '../../Redux/profile_reducer'\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../Redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizerdUserId;\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n\r\n            this.props.getUserProfile(userId as number);\r\n            this.props.getUserStatus(userId as number)\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType,) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<div>\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile} />\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizerdUserId: state.auth.userId\r\n\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}